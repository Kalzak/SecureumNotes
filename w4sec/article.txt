1
	Solidity versions
	Using very old versions of Solidity prevents benefits of big fixes and newer security checks
	Using the lotest versions might make contracts susceptible to undiscovered compiler bugs
	Consider using one of these versions
		0.7.5
		0.7.6
		0.8.4
2
	Unlocked pragma
	Contracts should be deployed using the same compiler version/flags with which they have been tested
	Locking the pragma (EG by not using ^ in a pragma solidiy statement) ensures that contracts do not accidentally get deployed
	  using an older compiler version with unfixed bugs
3
	Multiple Solidity pragma
	It is better to use one Solidity compiler version across all contracts instead of different versions with different bugs and 
	  security checks
4
	Incorrect access control
	Contract functions executing critical logic should have an appropriate access control enforced via address checks 
	  (EG owner, controlled etc) typically in modifiers
	Missing checks allow attackers to control critical logic
5
	Unprotected withdraw function
	Unprotected (external/public) function calls sending Ether/tokens to user-controlled addresses may allow users to withdraw
	  unauthorized funds
6
	Unprotected call to selfdestruct
	A user/attacker can mistakenly/intentionally kill the contract
	Protect access to such functions
7
	Modifier side-effects
	Modifiers should only implement checks and not make state changes and external calls which violates the 
	  'checks-effects-interactions' pattern
	These side-effects may go unnoticed by developers/auditors because the modifier code is typically far from the function 
	  implementation
	The 'checks-effects-interactions' pattern is the order that a function should execute things
		1) Checks
		2) Effects to state variables of contract
		3) Interaction to other contracts should be the very last step in any function
8
	Incorrect modifier
	If a modifier does not execute `_` or `revert`, the function using that modifier will return the default value causing 
	  unexpected behaviour
9
	Constructor names
	Before `solc 0.4.22` constructor names had to be the same name as the contract class containing it
	Misnaming it wouldn't make it a constructor which has security implications
	`solc 0.4.22` introduced the `constructor` keyword
	Until `solc 0.5.0`, contracts could have both old-style and new-style constructor names with the first defined one taking
	  precedence over  the second if both existed, which also led to security issues
	`solc 0.5.0` forced the use of the `constructor` keyword
10
	Void constructor	
	Calls to base contract constructors that are unimplemented leads to misplaced assumptions
	Check if the constructor is implemented or remove call if not
11
	Implicit constructor callValue check
	The creation of a contract that does not define a constructor but has a base that does, did not revert for calls with non-zero
	  callValue when such a constructor was not explicitly payable
	This is due to a compilier bug introduced in `v0.4.5` and fixed in `v0.6.8`
	Starting from Solidity 0.4.5 the creation code of contracts without explicit payable constructor is supposed to contain a 
	  callvalue check that results in contract creation reverting, if non-zero value is passed
	However this check was missing in case no explicit constructor was defined in  a contract at all, but the contract has a base
	  that does define a constructor
	In these cases it is possible to send value in a contract creation TX or using inline assembly without revert, even though
	  the creation code is supposed to be non-payable
12
	Controlled delegatecall
	`delegatecall()` or `callcode()` to an address controlled by the user allows execution of malicious contracts in the context of
	  the caller's state
	Ensure trusted destination addresses for such calls
13
	Reentrancy vulnerabilities
	Untrusted external contract calls could callback leading to unexpected results such as multiple withdrawals or out-of-order 
	  events
	Use 'check-effects-interactions' pattern or reentrancy guards
14
	ERC777 callbacks and reentrancy
	ERC777 tokens allow abritrary callbacks via hooks that are called during token transfers
	Malicious contract addresses may cause reentrancy on such callbacks if reentrancy guards are not used
15
	Avoid `transfer()` and `send()` as reentrancy mitigations
	Although they have been recommended as a security-best practice to prevent reentrancy attacks because they only forwards 2300
	  gas, the gas repricing of opcodes may break deployed contracts
	Use `call()` instead, without hardcoded gas limits along with 'checks-effects-interactions' pattern or using reentrancy guards
	  for reentrancy protection 
16
	Private on-chain data
	Marking variables `private` does not mean that they cannot be read on-chain
	Private data should not be stored unencrypted in contract code or state but instead stored encrypted or off-chain
17
	Weak PRNG
	PRNG relying on `block.timestamp`, `now` or `blockhash` can be influenced by miners to same extent and should be avoided
	PRNG = pseudorandom number generator
18
	Block values as time proxies
	`block.timestamp` and `block.number` are not good proxies (IE representations, not to be confused with smart contract
	  proxy/implementation pattern) for time because of issues with synchronization, miner manipulation and changing block times
19
	Integer overflow/underflow
	Not using OpenZeppelins SafeMath (or similar libraries) that check for overflows/underflows may lead to vulnerabilities or
	  unexpected behaviour if user/attacker can control the integer operands of such arithmetic operations
	`solc 0.8.0` introduced default overflow/underflow checks for all arithmetic operations
20
	Divide before multiply
	Performing multiplication before division is generaly better to avoid loss of precision because Solidity integer division might
	  truncate
21
	TX order dependence
	Race conditions can be forced on specific Ethereum TXs by monitoring the mempool
	For example, the classic ERC20 approve() change can be front-run using this method
	Do not make assumptions about TX order dependence
	In EVM context, a race condition vuln occurs when code depends on the order of TXs submitted to it 
		With ERC20 there is one with the approve function
		PersonA already has existing approved about for PersonB to spend of their behalf
		PersonA calls `approve` to update the approved amount, and PersonB sees it in the mempool and sends a TX to spend funds
		  with a high gas price so it gets in before the updated spend amount
		Then PersonA's TX for the new approve amount comes in, setting the allowance to a new value and PersonB and spend
		  more again
22
	ERC20 `approve()` race condition
	Use `safeIncreaseAllowance()` and `safeDecreaseAllowance()` from OpenZeppelin's SafeERC20 implementation to prevent race
	  conditions from manipulating the allowance amounts
23
	Signature malleability
	The `ecrecover` function is susceptible to signature malleability which could lead to replay attacks
	Consider using OpenZeppelin's ECDSA library
24
	ERC20 `transfer()` does not return boolean
	Contracts compiled with `solc >= 0.4.22` interacting with such functions will revert
	Use OpenZeppelins's SafeERC20 wrappers
	This happened during a short time window when OpenZeppelin has the incorrect contracts up
25
	Incorrect return values for ERC721 `ownerOf()`
	Contracts compiled with `solc >= 0.4.22` interacting with ERC721 `ownerOf()` that returns a `bool` instead of `address` type
	  will revert
	Use OpenZeppelin's ERC721 contracts
26
	Unexpected ETher and this.balance
	A contract can receive Ether via `payable` functions, selfdestruct(), coinbase TX or pre-sent before creation
	Contract logic depending on `this.balance` can therefore be manipulated
27
	fallback vs receive()
	Check that all precautions and subtleties of `fallback`/`recieve` functions related to vilibility, state mutability and Ether
	  transfers have been considered
28
	Dangerous strict equalities
	Use of strict equalities with tokens/Ether can be accidentally/maliciously cause unexpected behaviour
	Considering using >= or <= instead of == for such variables depending on the contract logic
29
	Locked Ether
	Contracts that accept Ether via `payable` functions but without withdrawal mechanisms will lock up that Ether
	Remove `payable` attribute or add withdraw function
30
	Dangerous usage of tx.origin
	Use of `tx.origin` for authorization may be abused by a MITM malicious contract forwarding calls from the legitimate user who
	  interacts with it
	Use msg.sender instead
31
	Contract check
	Checking if a call was made from an EOA or a CA is typically done by using `extcodesize` check with may be circumvented by
	  a contract during construction when it does not have source code available
	Checking if tx.origin == msg.sender is another option
	Both have implications that need to be considered
32
	Deleting a `mapping` within a `struct`
	Deleting a `struct` that contains a `mapping` will not delete the `mapping` contents which may lead to unintended consequences
	The actual data that the mapping points to is still there and could be accessed later
	Better to mark a struct as disabled than delete it
33
	Tautology or contradiction
	Tautologies (always true) or contradictions (always false) indicate a potential flawed logic or redundant checks 
34
	Boolean constant
	Use of boolean constants in code  is indicative of flawed logic
35
	Boolean equality
	Boolean variables can be checked within conditionals directly without the use of equality operators to be true/false
	Basically you shouldn't do `if(a == true)`
	Boolean constants can be used directly and do not need to be compared to `true` or `false`
36
	State modifying functions
	Functions that modify state (in assembly or otherwise) but are labelled `constant`/`pure`/`view` revert in `solc >= 0.5.0`
	  (work in prior versions) because of the STATICCALL opcode
37
	Return values of low-level calls
	Ensure that return values of low-level calls (call/callcode/delegatecall/send/etc) are checked to avoid unexpected failures
38
	Account existence check for low-level calls
	Low-level calls `call`/`delegatecall`/`staticcall` return true even if the account called is non-existent (per EVM design)
	Account existence must be checked prior to calling if needed
	This is mostly for contracts to make sure that code exists
39
	Dangerous shadowing
	Local variables, state variables, functions, modifiers, or events with names that shadow (ie override) builtin Solidity symbols
	  (EG `now`) or other declarations from the current scope are misleading and may lead to unexpected usages and behaviour
	Don't have names that are the same as builtins
40
	Dangerous state variables shadowing
	Shadowing state variables derived in contracts may be dangerous for critical variables such as contract owner 
	  (EG where modifiers in base contracts check on base variables but shadowed variables are set mistakenly) and contracts
	  incorrectly use base/shadowed variables
	Do not shadow state variables
41
	Pre-declaration usage of local variables
	Usage of a variables before its declaration (either declared later or in another scope) leads to unexpected behaviour in 
	  `solc < 0.5.0` but `solc >= 0.5.0` implements C99-style scoping rules where variables can only be used after they have been
	  declared and only in the same or nested scopes
42
	Costly operations inside a loop
	Operations such as state variable updates (use SSTOREs) inside a loop cost a lot of gas, are expensive and may lead to
	  out-of-gas errors
	Optimizations using local variables are preferred
43
	Calls inside a loop
	Calls to external contracts inside a loop are dangerous (especially if the loop index can be user-controlled) because it could
	  load to a DoS if one of the calls reverts or execution runs out of gas
	Avoid calls within loops, check that loop index cannot be user-controlled or is bounded
44
	DoS with block gas limit
	Programming patterns such as looping over arrays of unknown size may lead to DoS when the gas cost of execution exceeds the
	  block gas limit
45
	Missing events
	Events for critical state changes (EG owner and other critical parameters) should be emitted for tracking this off-chain
46
	Unindexed event parameters
	Parameters of certain events are expected to be indexed (EG ERC20 Transfer/Approval events) so that they're included in the
	  block's bloom filter for faster access
	Failure to do so might confuse off-chain tooling looking for such indexed events
47
	Incorrect event signature in libraries
	Contract types used in events in libraries cause an incorrect event signature hash
	Instead of using the type `address` in the hashed signature, the actual contract name was used, leading to a wrong has in the
	  logs
	This is due to a compiler bug introduced in `v0.5.0` and fixed in `v0.5.8`
48
	Dangerous unary expressions
	Unary expressions such as `x =+ 1` are likely errors where the programmer really meant to use `x += 1`
	Unary `+` operator was deprecated is `solc v0.5.0`
49
	Missing zero address validation
	Settes of address type parameters should include a zero-address check otherwise contract functionality may become inaccessible
	  or tokens burnt forever
50
	Critical address change
	Changing critical addresses in contracts should be a two-step process
		1st TX
			Registers new address (IE grants ownership)
		2nd TX
			Swaps the new address in for the old one
	This makes it so that there is an opportunity to recover from an incorrect address mistakenly being used
51
	assert() / require() state change
	Invariants in `assert()` and `require()` statements should not modify the state per best practices
52
	require() vs assert()
	require()
		Should be used for checking error conditions on inputs and return values 
	assert()
		Should be used for invariant checking
	Between `solc 0.4.10` and `0.8.0` require() used REVERT (0xfd) opcode which refunded remaining gas on failure while assert used
	  INVALID (0xfe) opcode which consumed all the supplied gas
53
	Deprecated keywords
	Use of deprecated functions/operators such as 
		`block.blockhash()` for `blockhash()`
		`msg.gas` for `gasleft()`
		`sha3()` for `keccak256()`
		`callcode()` for `delegatecall()`
		`suicide()` for `selfdestruct()`
		`constant` for `view`
		`var` for `<actual type name>`
	Avoid the old names to prevent unintended errors
54
	Function default visibility
	Functions without a visibility type specifier are `public` by default in `solc < 0.5.0`
	This can lead to a vulnerability where a malicious user may make unauthorized state changes
	`solc >= 0.5.0` requires explicit function visibility specifiers
55
	Incorrect inheritance order
	Contracts inheriting from multiple contracts with identical functions should specify the correct inheritance order
	IE more general to more specific to avoid inheriting the incorrect function implementation
56
	Missing inheritance
	A contract might appear (based on name or functions implemented) to inherit from another interface or abstract contract without
	  actually doing so
57
	Insufficient gas griefing
	TX relayers need to be trusted to provide enough gas for the TX to succeed
58
	Modifying refernce type parameters
	Structs/Arrays/Mappings passed as arguments to a function may be by value (memory) or reference (storage) as specifier by the
	 data location (optional before `solc 0.5.0`)
	Ensure correct usage of memory and storage in function parameters and make all data locations explicit
59
	Arbitrary jump with function type variable
	Function type variables should be carefully handles and avoided in assembly manipulations to prevent jumps to arbitrary 
	  code locations
60
	Hash collisions with multiple variable length arguments
	Using `abi.encodePacked()` with multiple variable length arguments can, in certain situations, lead to a hash collision
	Do not allow users to access parameters used in abi.encodePacked(), use fixed length arrays or use abi.encode()
	https://github.com/crytic/slither/wiki/Detector-Documentation
	TODO
61
	Malleability risk from dirty high order bits
	Types that do not occupy the full 32 bytes might contain 'dirty higher order bits' which does not affect operation on 
	  types but gives different results with `msg.data`
	https://docs.soliditylang.org/en/v0.8.1/security-considerations.html#minor-details
	TODO
62
	Incorrect shift in assembly
	Shift operators (`shl(x,y)`, `shr(x,y)`, `sar(x,y)`) in Solidity assembly apply the shift operation of `x` bits on `y` and not
	  the other way around, which may be confusing
	Check if the values in a shift operation are reversed
63
	Assembly usage
	Use of EVM assembly is error-prone and should be avoided or double-checked for correctness
64
	Right-to-left-override control character (U+202E)
	Malicious actors can use the Right-To-Left-Override unicode character to force RTL text rendering and confuse users as to the
	  real intent of a contract
	U+202E character should not appear in the source code of a smart contract
65
	Constant state variables	
	Should be declared constant to save gas
66
	Similar variable names
	Variables with similar names could be confused for each other and therefore should be avoided
67
	Uninitialized state/local variables
	The are assigned zero vvalues by the compiler and may cause unintended results
	EG transferring tokens to zero address
	Explicitly initialize all state/local variables
68
	Unititialized storage pointers
	Unititialized local storage variables can point to unexpected storage locations in the contract, which can lead to vulns
	`solc 0.5.0` and above disallow such pointers
69
	Uninitialized function pointers in constructors
	Calling uninitialized function pointers in constructors of contracts compiled with `solc` versions `0.4.5 - 0.4.25` and 
	`0.5.0 - 0.5.7` lead to unexpected behaviour because of a compiler bug
70
	Long number literals
	Number literals with many digits should be carefully checked as they are prone to error
	This is just human error from people not realizing how many numbers there ares
71
	Out-of-range enum
	`solc < 0.4.5` produced unexpected behaviour with out-of-range enums
	Check enum conversion or use a newer compiler
72
	Uncalled public functions
	Public functions that are never called from within the contracts should be declared `external` to save gas
73
	Dead/unreachable code
	Dead code may be indicative of programmer error, missing logic or potential optimization opportunity, which needs to be flagged
	  for removal or addressed appropriately
74
	Unused return values
	Unused return values of function calls are indicative of programmer errors which may have unexpected behaviour
75
	Unused variables	
	Unused local/state variables may be indicative of programmer errors which may have unexpected behavior
76
	Redundant statements
	Statements with no effects that do not produce code may be indicative of programmer error or missing logic, which needs to be 
	  flaggod for removal or addressed appropriately
77
	Storage array with signed Integers with ABIEncoderV2
	Assigning an array of signed integers to a storage array of different type can lead to data corruption in that array
	This is due to a compiler bug introduced in v0.4.7 and fixed in v0.5.10
78
	Dynamic constructor arguments clipped with ABIEncoderV2
	A contract's constructor which takes structs or arrays that contain dynamically sized arrays reverts or decodes to invalid data
	  when ABIEncoderV2 is used
	This is due to a compiler bug introduced in v0.4.16 and fixed in v0.5.9
79
	Storage array with multiSlot element with ABIEncoderV2
	Storage arrays containing structs or other statically sized arrays are not read properly when directly encoded in external 
	  function calls or in `abi.encode()`
	This is due to a compiler bug introduced in v0.4.16 and fixed in v0.5.10
80
	Calldata structs with statically sized and dynamically encoded members with ABIEncoderV2
	Reading from calldata structs that contain dynamically encoded, but statically sized members can result in incorrect values
	This is due to a compiler bug introduced in v0.5.6 and fixed in v0.5.11
81
	Packed storage with ABIEncoderV2
	Storage structs and arrays with types shorter than 32 bytes can cause data corruption if encoded directly from storage using
	  ABIEncoderV2
	This is due to a compiler bug introduced in v0.5.0 and fixed in 0.5.7
82
	Incorrect loads with Yul optimizer and ABIEncoderV2
	The Yul optimizer incorrectly replaces MLOAD and SLOAD calls with values that have been previously written to the load location
	This can only happen if ABIEncoderV2 is activated and the experimental Yul optimizer has been activated manually in addition 
	  to the regular optimizer in the compiler settings
	This is due to a compiler bug introduced in v0.5.14 and fixed in v0.5.15
83
	Array slices dynamically encoded base type with ABIEncoderV2
	Accessing array slices of arrays with dynamically encoded base types (EG multi dimensional arrays) can result in invalid data 
	  being read
	This is due to a compiler bug introduced in v0.6.0 and fixed in v0.6.8
84
	Missing escaping in formatting with ABIEncoderV2
	String literals containing double backslash characters passed directly to external or encoding function calles can lead to a
	  different string being used when ABIEncoderV2 is enabled
	This is due to a compiler bug introduced in v0.5.14 and fixed in v0.6.8
85
	Double shift size overflow
	Double bitwise shifts by large constants whose sum overflows 256 bits can result in unexpected values
	Nested logical shift operations whose total shift size is 2**256 or more are incorrectly optimized
	This only applies to shifts by numbers of bits that are compile-time constant expressions
	This happens when the optimizer is used and evmVersion >= Constantinople
	This is due to a compiler bug introduced in v0.5.5 and fixed in v0.5.6
86
	Incorrect byte instruction optimization
	The optimizer incorrectly handles byte opcodes whose second argument is 31 or a constant expression that evaluates to 31
	This can result in unexpected values
	This can happen when the performing index access on bytesNN types with a compile time constant value (not index) of 31 or when
	  using the byte opcode in inline assembly
	This is due to a compiler bug introduced in v0.5.5 and fixed in v0.5.7
87
	Essential assignments removed with Yul optimizer
	The Yul optimizer can remove essential assignments to variables declared inside for loops when Yul's `continue` or `break` 
	  statement is used mostly while using inline assembly with `for` loops and `continue` and `break` statements
	This is due to a compiler bug introduced in v0.5.8/v0.6.0 and fixed in v0.5.16/v0.6.1
88
	Private methods overridden
	While private methods of base contracts are not visible and cannot be called directly from the derived contract, it is still
	  possible to declare a function of the same name and type and thus change the behaivour of the base contract's function
	This is due to a compiler bug introduced in v0.3.0 and fixed in v0.5.17
89
	Tuple assignment multi stack slot components
	Tuple assignments with components that occupy several stack slots (IE nested tuples, pointerns to external functions or 
	  references to dynamically sized calldata arrrays) can result in invalid values
	This is due to a compiler bug introduced in v0.1.6 and fixed in v0.6.6
90
	Dynamic array cleanup
	When assigning a dynamically sized array with types of size at most 16 bites in storage causing the assigned array to shrink,
	  some parts of deleted slots were not zeroed out
	This is due to a compiler buy fixed in v0.7.3
91
	Empty byte array copy
	Copying an empty byte array (or string) from memory or calldata to storage can result in data corruption if the target array's 
	  length is increased subsequently without storing new data
	This is due to a compiler buy fixed in v0.7.4
92
	Memory array creation overflow
	The creation of very large memory arrays can result in overlapping memory regions and thus memory corruption
	The is due to a compiler bug introduced in v0.2.0 and fixed in v0.6.5
93
	Calldata `using for`
	Function calls to internal library functions with calldata parameters called via `using for` can result in invalid data being 
	  read 
	This is due to a compiler bug introduced in v0.6.9 and fixed in v0.6.10
94
	Free function redefinition
	The compiler does not flag an error when two or more free functions (functions outside of a contract) with the same name 
	  and parameter types are defined in a source unit or when an imported free function alias shadows another free function with
	  a different name but identical parameter types
	This is due to a compiler bug introduced in v0.7.1 and fixed in v0.7.2
95
	Unprotected initializers in proxy-based upgradable contracts
	Proxy-based upgradable contracts need to use `public` initializer functions instead of constructors that need to use `public`
	  initializer functions instead of constructors that need to be explicitly called once once
	Preventing multiple invocations of such initializer functions (EG via `initializer` modifier from OZ's `Initializable` library
	  is a must
96
	Initializing state-variables in proxy-based upgradable contracts
	This should be done in initializer functions and not as part of the state variables declarations in which case they won't be set
97
	Inmport upgradable contracts in proxy-based upgradable contracts
	Contracts imported from proxy-based upgradeable contracts should also be upgradable where such contracts have been modified
	  to use initializers instead of constructors
98
	Avoid `selfdestruct` or `delegatecall` in proxy-based upgradable contracts
	This will cause the logic contract to be destroyed and all contract instances will end up delegating calls to an address
	  without any code
99
	State variables in proxy-based upgradable contracts
	The declaration order/layout and type/mutability of state variables in such contracts should be preserved exactly while 
	  upgrading to prevent critical storage layout mismatch errors
100
	Function ID collision between proxy/implementation in proxy-based upgradable contracts
	Malicious proxy contracts my exploit function ID collision to invoke unintended proxy functions instead of delegating to
	  implementation functions
	Check for function ID collisions
101
	Function shadowing between proxy/contract in proxy-based upgradable contracts
	Shadow functions in proxy contract prevent functions in logic contract from being invoked
