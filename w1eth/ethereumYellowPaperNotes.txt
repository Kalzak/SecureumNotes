Value
	10 ** 0 = Wei
	10 ** 12 = Szabo
	10 ** 15 = Finney
	10 ** 18 = Ether	
Which history
	To distinguish between diverged blockchains you have chainID
	Ethereum mainnet chainID is 1
Blocks State and Transactions
	World state
		Is a mapping between addresses (160-bit identifiers) and account data
		Account data is a data structure serialized as RLP (Recursive Length Prefix)
		This is not stored on the blockchain itself
			A modified merkle patricia tree (trie) maintains the mapping
			The trie requires a simple database backend that maintains a mapping of bytearrays to byteararys
				This is the underlying database of the state database
			Has a number of benefits
				Root node of the data structure is cryptographically dependent on all internal data
				  therefore its hash can be used as a secure identity for the entire system state
				Being an immutable data structure, it allows any previous state (whose root hash is known) to
				  be recalled and that makes it easy to revert to old states
		Account state
			Has four fields
				nonce
					Scalar value equal to num TXs sent from an address
					OR
					If code account then it's num of contracts created by account
				balance
					Scalar value equal to number of Wei owned by this address
				storageRoot
					A 256-bit hash of the root node of a Merkle Patricia tree that encodes the storage contents
					  of the account (a mapping between 256-bit integer values), encoded into the trie as a mapping
					  from the Keccak 256-bit hash of the 256-bit integer keys to the RLP-encoded 256-bit integer
					  values
				codeHash
					Hash of the EVM code of the account (if exists)
					Is immutable and cannot be changed after construction
The transaction
	A transaction is a single cryptographically-signed instruction constructed by an external actor externally to the scope
	  of Ethereum
	The sender of a TX can not be a contract
	There are two types of TXs
		1) A TX that results in message calls
		2) A TX that results in the creation of new accounts with associated code (known informally as contract creation)
	Transaction fields
		nonce
			A scalar value equal to the number of TXs sent by the sender
		gasPrice
			A scalar value equal to the number of Wei to be paid per unit of gas for all computation costs incurred as a
			  result of the execution of this TX
		gasLimit
			A scalar value equal to the max amount of gas that shoud be used up in executing this TX
			This is paid up-front before any computation is done
		to
			The 160-bit address of the message call's repicient 
			OR
			For a contract creation the zero address
		value
			A scalar value equal to the number of Wei to be transferred to the message call's recpient
			OR
			For contract creation the amount of ether the new contract will have when it's created
		v,r,s
			Values correspending to the signature of the transaction and used to determine the sender of the TX
		BONUS
			If contract creation, there is another field called 'init'
				An unlimited size byte array specifying the EVM-code for the account initialization proceduce
			A message call TX contains 'data'
				An unlimited size byte array specifying the input data of the message call
The block
	The collection of relevant pieces of information (known as the block header) together with information corresponding to
	  the comprised TXs and a set of other block headers that are known to have a parent equal to the present block's parent's
	  parent (such blocks are known as ommers)
		Note: Ommer is the gender neutral word for 'sibling of a parent'
	 The block header contains
		parentHash
			The keccak 256-bit hash of the parent block's header in its entirety
		ommersHash
			The keccak 256-bit hash of the ommers list portion of this block
		beneficiary
			The 160-bit address to which all fees collected from the successful mining of this block be transferred
		stateRoot
			The keccak 256-bit hash of the root node of the state trie after all TXs are executed and finalizations done
		receiptsRoot
			The keccak 256-bit hash of the root node of the trie populated with the receipts of each TX in the TXs list
			  portion of the block
		logsBloom
			The Bloom filter composed from indexable information (logged address and log topics) contained in each log 
			  entry from the receipt of each TX in the TXs list
		difficulty
			A scalar value corresponding to the difficulty level of this block
			Can be calculated from the previous block's difficulty level and the timestamp
		number
			A scalar value equal to the number of ancestor blocks
			The genesis blocks has a number of zero
		gasLimit
			A scalar value equal to the current limit of gas expenditure per block
		gasUsed
			A scalar value equal to the total gas used in TXs in this block
		timestamp
			A scalar value equal to the reasonable output of Unix's time() at this block's inception
		extraData
			An abritrary bytearray containing data relevant to this block
			Must be 32bytes or fewer
		mixHash
			A 256-bit hash which, combined with the nonce proves that a sufficient amount of computation has
			  been carried out on this block
		nonce
			A 64-bit value which, combined with the mixHash, proves that a sufficient amount of computation has
			  been carried out on this block
	Aside from the header, there are two other components that make up a block
		A list of ommer block headers (of the same format as above)
		A series of TXs
	TX receipt
		In order to encode inforamtion about a TX concerning which it may be useful to form a zero knowledge proof
		   or index and search we encode a receipt of each TX containing certain information from its execution
		Each receipt is placed in an index-keyed trie and the root is recorded in the header
			This is receiptsRoot
		Each TX receipt is a tuple of four items
			1)
				Status code of the TX
			2)
				Cumulative gas used in the block 
			3)
				The set of logs created through execution of the TX
			4)
				The bloom filter composed from information in those logs
Gas and payment

