1
	Audit
	An external security assessment of a project codebase
	Typically requested and paid-for by the project team
	1
		It detects and describes (in a report) security issues with underlying vulnerabilities, severity/difficulty, potential
		  exploit scenarios and recommended fixes
	2
		It also provides subjective insights into code quality, documentation and testing
	3
		The scope/depth/format of audit varies across auditing teams but they generally cover similar aspects
2
	Audit scope
	For Ethereum-based smart-contract projects, the scope is typically the on-chain smart contract code and sometimes includes the
	  off-chain components that interact with the smart contracts
3
	Audit goal
	The goal of audits is to assess project code (with any associated specification, documentation) and alert project team, 
	  typically before launch, of potential security-related issues that need to be addressed to improve security posture, decrease
	  attack surface and mitigate risk
4
	Audit Non-goal
	Audit is not a security guarantee of 'bug-free' code by any stretch of the imagination but a best-effort endeavour by trained
	  security experts operating within a reasonable constaints of time, understanding, expertise and of course, decidability
5
	Audit target
	Security companies execute audits for clients who pay for their services
	Engagements are therefore geared towards priorities of project owners and not project users/investors
	Audits are not intended to alert potential projects users of any inherent risk
	That is not their business/technical goal
6
	Audit need
	Smart contract based projects do not have sufficient in-house Ethereum smart contract security expertise and/or time to perform
	  internal security assessments and therefore rely on external experts who have domain expertise in those areas
	Even if projects have some expertise in-house, they would still benefit from an unbiased external team with 
	  supplementary/complementary skill sets that can review the assumptions, design, specification and implemenation of the
	  project codebase
7
	Audit types
	Depend on the scope/nature/status of projects but generally fall into the following categories
		1) New audit
			For a new project that is being launched
		2) Repeat audit
			For a new version of an existing project being revised with new/fixed features
		3) Fix audit
			For reviewing the fixes made to the findings from a current/prior audit
		4) Retainer audit
			For constantly reviewing project updates
		5) Incident audit
			For reviewing an exploit incidentt, root causing the incident, identifying the underlying vulnerabilities and
			  proposing fixes
8
	Audit timeline
	Depends on the scope/nature/status of the project to be assessed and the type of audit
	This may vary from a few days for a fix/retainer audit to several weeks for a new/repeart/incident audit
9
	Audit effort
	Typically involves more than one auditor simultaneously for getting independent, redundant or supplementary/complementary
	  assessment expertise on the project
10
	Audit costs
	Depends on the type/scope of audit but typically costs upwards of USD 10K/week depending on the complexity of the project, 
	  market demand/supply for audits and the strength/reputation of the auditing firm
11
	Audit prerequisites should include
	1
		Clear definition of the scope of the project to be assessed typically in the form of a specific commit hash of
		  project files/folders on a GitHub repository
	2
		Public/private repository
	3
		Public/anonymous team
	4
		Specification of the project's design and architecture
	5
		Documentation of the project's implementation and business logic
	6
		Threat models and specific areas of concern
	7
		Prior testing, tools used, other audits
	8
		Timeline, effort and costs/payments
	9
		Engagement dynamics/channels for questions/clarifications, findings communication and reports
	10
		Points of contact of both sides
12
	Audit limitations
	Audits are necessary (for now at least) but not sufficient
	1
		There is risk reduction but residual risk exists because of several factors such as... 
			Limited amount of audit time/effort
		  	Limited insights into project specification/implementation
			Limited security expertise in the new and fast evolving technologies
			Limited audit scope
			Significant project complexity
			Limitations of automated/manual analysis
	2
		Not all audits are equal
		It is greatly dependent on the expertise/experience of auditors, effort invested vis-a-vis project complexity/quality
		  and tools/processes used
	3
		Audits provide a project's security snapshot over a brief (typically few weeks) period
		However, smart contracts need to evolve over time to add new features, fix bugs or optimize
		Relying on external audits after every change is impractical
13
	Audit reports
	Include details of the...
		Scope
		Goals
		Effort
		Timeline
		Approach
		Tools/techniques used
		Findings summary
		Vulnerability details
		Vulnerability classification
		Vulnerability severity/difficulty/likelihood
		Vulnerability exploit scenarios
		Vulnerability fixes
		Informational recommendations/suggestions on programming best practices
14
	Audit Findings Classification
	The vulns found during the audit are typically classified into different categories which helps to understand the...
		Nature of the vuln
		Potential impact/severity
		Impacted project components/functionality
		Exploit scenarios
	EG trail of bits uses the following classification
	1
		Access controls
		Related to authorization of users and assessment of right
	2
		Auditing and logging
		Related to auditing actions or logging of problems
	3
		Authentication
		Related to the identification of users
	4
		Configuration
		Related to security configurations of servers, devices of software
	5
		Cryptography
		Related to protecting the privacy or integrity of data
	6
		Data exposure
		Related to unintended exposure of sensitive information
	7
		Data validation
		Related to improper reliance on the structure or values of data
	8
		Denial of service
		Related to causing system failure
	9
		Error reporting
		Related to the reporting of error conditions in a secure fashion
	10
		Patching
		Related to keeping software up to date
	11
		Session management
		Related to the identification of authenticated users
	12
		Timing
		Related to race conditions, locking or order of operations
	13
		Undefined behaviour
		Related to undefined behaviour triggered by the program
15
	Audit findings likelihood/difficulty
	Per OWASP, likelihood or difficulty is a rough measure of how likely or difficult this particular vulnerability is to be 
	  uncovered and exploited by an attacker
	OWASP proposes three Likelihood levels of
		Low
		Medium
		High
	EG trail of bits classifies every finding into four difficulty
		1) Undetermined
			The difficulty of exploit was not determined during this engagement
		2) Low
			Commonly exploited, public tools exist or can be scripted that exploit this flaw
		3) Medium
			Attackers must write an exploit, or need an in-depth knowledge of a complex system
		4) High
			The attacker must have privileged insider access to the system, may need to know exteremely complex technical 
			  details or must discover other weaknesses in order to exploit this issue
16
	Audit findings impact
	Per OWASP, this estimates the magnitude of the techincal and business impact on the system if the vulnerability were to be
	  exploited
	OWASP proposes three impact levels of low, medium and high
